// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/02/2025 13:52:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    interface
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module interface_vlg_sample_tst(
	AD,
	Clock,
	nIOR,
	nIOW,
	nStart,
	nStop,
	sampler_tx
);
input [7:0] AD;
input  Clock;
input  nIOR;
input  nIOW;
input  nStart;
input  nStop;
output sampler_tx;

reg sample;
time current_time;
always @(AD or Clock or nIOR or nIOW or nStart or nStop)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module interface_vlg_check_tst (
	count,
	Enable,
	Read,
	Result,
	SA,
	T,
	T_stop,
	sampler_rx
);
input [4:0] count;
input  Enable;
input  Read;
input  Result;
input  SA;
input  T;
input  T_stop;
input sampler_rx;

reg [4:0] count_expected;
reg  Enable_expected;
reg  Read_expected;
reg  Result_expected;
reg  SA_expected;
reg  T_expected;
reg  T_stop_expected;

reg [4:0] count_prev;
reg  Enable_prev;
reg  Read_prev;
reg  Result_prev;
reg  SA_prev;
reg  T_prev;
reg  T_stop_prev;

reg [4:0] count_expected_prev;
reg  Enable_expected_prev;
reg  Read_expected_prev;
reg  Result_expected_prev;
reg  SA_expected_prev;
reg  T_expected_prev;
reg  T_stop_expected_prev;

reg [4:0] last_count_exp;
reg  last_Enable_exp;
reg  last_Read_exp;
reg  last_Result_exp;
reg  last_SA_exp;
reg  last_T_exp;
reg  last_T_stop_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	count_prev = count;
	Enable_prev = Enable;
	Read_prev = Read;
	Result_prev = Result;
	SA_prev = SA;
	T_prev = T;
	T_stop_prev = T_stop;
end

// update expected /o prevs

always @(trigger)
begin
	count_expected_prev = count_expected;
	Enable_expected_prev = Enable_expected;
	Read_expected_prev = Read_expected;
	Result_expected_prev = Result_expected;
	SA_expected_prev = SA_expected;
	T_expected_prev = T_expected;
	T_stop_expected_prev = T_stop_expected;
end



// expected Enable
initial
begin
	Enable_expected = 1'bX;
end 

// expected SA
initial
begin
	SA_expected = 1'bX;
end 
// expected count[ 4 ]
initial
begin
	count_expected[4] = 1'bX;
end 
// expected count[ 3 ]
initial
begin
	count_expected[3] = 1'bX;
end 
// expected count[ 2 ]
initial
begin
	count_expected[2] = 1'bX;
end 
// expected count[ 1 ]
initial
begin
	count_expected[1] = 1'bX;
end 
// expected count[ 0 ]
initial
begin
	count_expected[0] = 1'bX;
end 

// expected Result
initial
begin
	Result_expected = 1'bX;
end 

// expected Read
initial
begin
	Read_expected = 1'bX;
end 

// expected T
initial
begin
	T_expected = 1'bX;
end 

// expected T_stop
initial
begin
	T_stop_expected = 1'bX;
end 
// generate trigger
always @(count_expected or count or Enable_expected or Enable or Read_expected or Read or Result_expected or Result or SA_expected or SA or T_expected or T or T_stop_expected or T_stop)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected count = %b | expected Enable = %b | expected Read = %b | expected Result = %b | expected SA = %b | expected T = %b | expected T_stop = %b | ",count_expected_prev,Enable_expected_prev,Read_expected_prev,Result_expected_prev,SA_expected_prev,T_expected_prev,T_stop_expected_prev);
	$display("| real count = %b | real Enable = %b | real Read = %b | real Result = %b | real SA = %b | real T = %b | real T_stop = %b | ",count_prev,Enable_prev,Read_prev,Result_prev,SA_prev,T_prev,T_stop_prev);
`endif
	if (
		( count_expected_prev[0] !== 1'bx ) && ( count_prev[0] !== count_expected_prev[0] )
		&& ((count_expected_prev[0] !== last_count_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[0] = count_expected_prev[0];
	end
	if (
		( count_expected_prev[1] !== 1'bx ) && ( count_prev[1] !== count_expected_prev[1] )
		&& ((count_expected_prev[1] !== last_count_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[1] = count_expected_prev[1];
	end
	if (
		( count_expected_prev[2] !== 1'bx ) && ( count_prev[2] !== count_expected_prev[2] )
		&& ((count_expected_prev[2] !== last_count_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[2] = count_expected_prev[2];
	end
	if (
		( count_expected_prev[3] !== 1'bx ) && ( count_prev[3] !== count_expected_prev[3] )
		&& ((count_expected_prev[3] !== last_count_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[3] = count_expected_prev[3];
	end
	if (
		( count_expected_prev[4] !== 1'bx ) && ( count_prev[4] !== count_expected_prev[4] )
		&& ((count_expected_prev[4] !== last_count_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_count_exp[4] = count_expected_prev[4];
	end
	if (
		( Enable_expected_prev !== 1'bx ) && ( Enable_prev !== Enable_expected_prev )
		&& ((Enable_expected_prev !== last_Enable_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Enable :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Enable_expected_prev);
		$display ("     Real value = %b", Enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Enable_exp = Enable_expected_prev;
	end
	if (
		( Read_expected_prev !== 1'bx ) && ( Read_prev !== Read_expected_prev )
		&& ((Read_expected_prev !== last_Read_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_expected_prev);
		$display ("     Real value = %b", Read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Read_exp = Read_expected_prev;
	end
	if (
		( Result_expected_prev !== 1'bx ) && ( Result_prev !== Result_expected_prev )
		&& ((Result_expected_prev !== last_Result_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Result_exp = Result_expected_prev;
	end
	if (
		( SA_expected_prev !== 1'bx ) && ( SA_prev !== SA_expected_prev )
		&& ((SA_expected_prev !== last_SA_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SA_expected_prev);
		$display ("     Real value = %b", SA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SA_exp = SA_expected_prev;
	end
	if (
		( T_expected_prev !== 1'bx ) && ( T_prev !== T_expected_prev )
		&& ((T_expected_prev !== last_T_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp = T_expected_prev;
	end
	if (
		( T_stop_expected_prev !== 1'bx ) && ( T_stop_prev !== T_stop_expected_prev )
		&& ((T_stop_expected_prev !== last_T_stop_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T_stop :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_stop_expected_prev);
		$display ("     Real value = %b", T_stop_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_T_stop_exp = T_stop_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module interface_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] AD;
reg Clock;
reg nIOR;
reg nIOW;
reg nStart;
reg nStop;
// wires                                               
wire [4:0] count;
wire Enable;
wire Read;
wire Result;
wire SA;
wire T;
wire T_stop;

wire sampler;                             

// assign statements (if any)                          
interface i1 (
// port map - connection between master ports and signals/registers   
	.AD(AD),
	.Clock(Clock),
	.count(count),
	.Enable(Enable),
	.nIOR(nIOR),
	.nIOW(nIOW),
	.nStart(nStart),
	.nStop(nStop),
	.Read(Read),
	.Result(Result),
	.SA(SA),
	.T(T),
	.T_stop(T_stop)
);

// Clock
always
begin
	Clock = 1'b0;
	Clock = #22500 1'b1;
	#7500;
end 
// AD[ 7 ]
initial
begin
	AD[7] = 1'b0;
end 
// AD[ 6 ]
initial
begin
	AD[6] = 1'b0;
end 
// AD[ 5 ]
initial
begin
	AD[5] = 1'b1;
	AD[5] = #130000 1'b0;
	AD[5] = #810000 1'b1;
	AD[5] = #110000 1'b0;
	AD[5] = #80000 1'b1;
end 
// AD[ 4 ]
initial
begin
	AD[4] = 1'b0;
	AD[4] = #70000 1'b1;
	AD[4] = #60000 1'b0;
	AD[4] = #810000 1'b1;
	AD[4] = #110000 1'b0;
	AD[4] = #80000 1'b1;
end 
// AD[ 3 ]
initial
begin
	AD[3] = 1'b1;
	AD[3] = #70000 1'b0;
end 
// AD[ 2 ]
initial
begin
	AD[2] = 1'b0;
end 
// AD[ 1 ]
initial
begin
	AD[1] = 1'b0;
end 
// AD[ 0 ]
initial
begin
	AD[0] = 1'b1;
	AD[0] = #70000 1'b0;
end 

// nStart
initial
begin
	nStart = 1'b1;
	nStart = #10000 1'b0;
	nStart = #30000 1'b1;
	nStart = #30000 1'b0;
	nStart = #30000 1'b1;
	nStart = #970000 1'b0;
	nStart = #30000 1'b1;
	nStart = #30000 1'b0;
	nStart = #30000 1'b1;
end 

// nStop
initial
begin
	nStop = 1'b1;
	nStop = #970000 1'b0;
	nStop = #30000 1'b1;
end 

// nIOR
initial
begin
	nIOR = 1'b1;
	nIOR = #40000 1'b0;
	nIOR = #10000 1'b1;
	nIOR = #50000 1'b0;
	nIOR = #10000 1'b1;
	nIOR = #900000 1'b0;
	nIOR = #10000 1'b1;
	nIOR = #80000 1'b0;
	nIOR = #10000 1'b1;
	nIOR = #50000 1'b0;
	nIOR = #10000 1'b1;
end 

// nIOW
initial
begin
	nIOW = 1'b1;
	nIOW = #20000 1'b0;
	nIOW = #10000 1'b1;
	nIOW = #50000 1'b0;
	nIOW = #10000 1'b1;
	nIOW = #900000 1'b0;
	nIOW = #10000 1'b1;
	nIOW = #80000 1'b0;
	nIOW = #10000 1'b1;
	nIOW = #50000 1'b0;
	nIOW = #10000 1'b1;
end 

interface_vlg_sample_tst tb_sample (
	.AD(AD),
	.Clock(Clock),
	.nIOR(nIOR),
	.nIOW(nIOW),
	.nStart(nStart),
	.nStop(nStop),
	.sampler_tx(sampler)
);

interface_vlg_check_tst tb_out(
	.count(count),
	.Enable(Enable),
	.Read(Read),
	.Result(Result),
	.SA(SA),
	.T(T),
	.T_stop(T_stop),
	.sampler_rx(sampler)
);
endmodule

