/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2013 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1200.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 0.0;
	GRID_DUTY_CYCLE = 50;
}




SIGNAL("AD")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("AD[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("AD[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("AD[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("AD[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("AD[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("AD[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("AD[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("AD[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("Clock")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("count")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 5;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("count[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("nIOR")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("nIOW")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("Result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Read")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("T")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("nStart")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("nStop")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("SA")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("T_stop")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Enable")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("AD[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1200.0;
	}
}
TRANSITION_LIST("AD[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1200.0;
	}
}
TRANSITION_LIST("AD[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 130.0;
		LEVEL 0 FOR 810.0;
		LEVEL 1 FOR 110.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 70.0;
	}
}
TRANSITION_LIST("AD[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 70.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 810.0;
		LEVEL 1 FOR 110.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 70.0;
	}
}
TRANSITION_LIST("AD[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 70.0;
		LEVEL 0 FOR 1130.0;
	}
}
TRANSITION_LIST("AD[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1200.0;
	}
}
TRANSITION_LIST("AD[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1200.0;
	}
}
TRANSITION_LIST("AD[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 70.0;
		LEVEL 0 FOR 1130.0;
	}
}
TRANSITION_LIST("Clock")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 7.5;
	}
}
TRANSITION_LIST("count[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.297;
		LEVEL 0 FOR 543.251;
		LEVEL 1 FOR 450.0;
		LEVEL 0 FOR 201.452;
	}
}
TRANSITION_LIST("count[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.591;
		LEVEL 0 FOR 303.251;
		LEVEL 1 FOR 240.0;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 210.0;
		LEVEL 0 FOR 201.158;
	}
}
TRANSITION_LIST("count[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 6.224;
		LEVEL 0 FOR 183.251;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 120.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 120.0;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 120.0;
		LEVEL 1 FOR 90.0;
		LEVEL 0 FOR 200.525;
	}
}
TRANSITION_LIST("count[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.955;
		LEVEL 0 FOR 123.251;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 200.794;
	}
}
TRANSITION_LIST("count[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.237;
		LEVEL 0 FOR 103.207;
		LEVEL 1 FOR 20.412;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 210.0;
		LEVEL 1 FOR 21.144;
	}
}
TRANSITION_LIST("nIOR")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 900.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 30.0;
	}
}
TRANSITION_LIST("nIOW")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 900.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 50.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 50.0;
	}
}
TRANSITION_LIST("Result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 6.326;
		LEVEL 0 FOR 117.89;
		LEVEL 1 FOR 5.288;
		LEVEL 0 FOR 54.712;
		LEVEL 1 FOR 5.765;
		LEVEL 0 FOR 54.235;
		LEVEL 1 FOR 5.699;
		LEVEL 0 FOR 54.301;
		LEVEL 1 FOR 5.479;
		LEVEL 0 FOR 234.521;
		LEVEL 1 FOR 5.479;
		LEVEL 0 FOR 234.521;
		LEVEL 1 FOR 5.48;
		LEVEL 0 FOR 114.52;
		LEVEL 1 FOR 5.765;
		LEVEL 0 FOR 54.235;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 22.5;
		LEVEL 1 FOR 5.221;
		LEVEL 0 FOR 174.779;
		LEVEL 1 FOR 7.5;
		LEVEL 0 FOR 18.284;
	}
}
TRANSITION_LIST("Read")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.418;
		LEVEL 0 FOR 103.338;
		LEVEL 1 FOR 890.012;
		LEVEL 0 FOR 169.988;
		LEVEL 1 FOR 32.244;
	}
}
TRANSITION_LIST("T")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.741;
		LEVEL 0 FOR 963.442;
		LEVEL 1 FOR 29.809;
		LEVEL 0 FOR 202.008;
	}
}
TRANSITION_LIST("nStart")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 10.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 970.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 40.0;
	}
}
TRANSITION_LIST("nStop")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 970.0;
		LEVEL 0 FOR 30.0;
		LEVEL 1 FOR 200.0;
	}
}
TRANSITION_LIST("SA")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.315;
		LEVEL 0 FOR 83.289;
		LEVEL 1 FOR 1000.0;
		LEVEL 0 FOR 60.0;
		LEVEL 1 FOR 52.396;
	}
}
TRANSITION_LIST("T_stop")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.781;
		LEVEL 1 FOR 1195.219;
	}
}
TRANSITION_LIST("Enable")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.293;
		LEVEL 0 FOR 83.289;
		LEVEL 1 FOR 909.887;
		LEVEL 0 FOR 150.113;
		LEVEL 1 FOR 51.418;
	}
}


DISPLAY_LINE
{
	CHANNEL = "Clock";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "AD";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3, 4, 5, 6, 7, 8, 9;
}

DISPLAY_LINE
{
	CHANNEL = "AD[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "AD[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "AD[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "AD[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "AD[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "AD[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "AD[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "AD[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "nStart";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "nStop";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "nIOR";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "nIOW";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Enable";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "SA";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "count";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 16;
	TREE_LEVEL = 0;
	CHILDREN = 17, 18, 19, 20, 21;
}

DISPLAY_LINE
{
	CHANNEL = "count[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "count[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "count[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "count[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "count[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 16;
}

DISPLAY_LINE
{
	CHANNEL = "Result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Read";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "T";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "T_stop";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 25;
	TREE_LEVEL = 0;
}
TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
