/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2013 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 0.0;
	GRID_DUTY_CYCLE = 50;
}




SIGNAL("AD")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("AD[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("AD[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("AD[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("AD[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("AD[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("AD[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("AD[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("AD[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "AD";
}

SIGNAL("Clock")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("count")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 5;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("count[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("count[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "count";
}

SIGNAL("nIOR")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("nIOW")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("Result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Start")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("Stop")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("En")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Read")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("sa")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Per_stop")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("T")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("AD[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}
TRANSITION_LIST("AD[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 90.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 870.0;
	}
}
TRANSITION_LIST("AD[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 90.0;
		LEVEL 0 FOR 910.0;
	}
}
TRANSITION_LIST("AD[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 90.0;
		LEVEL 0 FOR 910.0;
	}
}
TRANSITION_LIST("AD[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 90.0;
		LEVEL 0 FOR 910.0;
	}
}
TRANSITION_LIST("AD[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}
TRANSITION_LIST("AD[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}
TRANSITION_LIST("AD[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 90.0;
		LEVEL 0 FOR 910.0;
	}
}
TRANSITION_LIST("Clock")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
		LEVEL 0 FOR 17.6;
		LEVEL 1 FOR 2.4;
	}
}
TRANSITION_LIST("count[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.273;
		LEVEL 0 FOR 422.888;
		LEVEL 1 FOR 300.0;
		LEVEL 0 FOR 271.839;
	}
}
TRANSITION_LIST("count[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.484;
		LEVEL 0 FOR 262.888;
		LEVEL 1 FOR 160.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 140.0;
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 111.628;
	}
}
TRANSITION_LIST("count[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.889;
		LEVEL 0 FOR 182.888;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 60.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 80.0;
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 31.223;
	}
}
TRANSITION_LIST("count[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.212;
		LEVEL 0 FOR 142.888;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 40.0;
		LEVEL 0 FOR 31.9;
	}
}
TRANSITION_LIST("count[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.522;
		LEVEL 0 FOR 123.449;
		LEVEL 1 FOR 19.439;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		LEVEL 1 FOR 11.59;
	}
}
TRANSITION_LIST("nIOR")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 120.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 870.0;
	}
}
TRANSITION_LIST("nIOW")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 10.0;
		LEVEL 1 FOR 890.0;
	}
}
TRANSITION_LIST("Result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 6.292;
		LEVEL 0 FOR 993.708;
	}
}
TRANSITION_LIST("Start")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 90.0;
		LEVEL 1 FOR 30.0;
		LEVEL 0 FOR 880.0;
	}
}
TRANSITION_LIST("Stop")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}
TRANSITION_LIST("En")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 4.41;
		LEVEL 0 FOR 103.037;
		LEVEL 1 FOR 892.553;
	}
}
TRANSITION_LIST("Read")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.932;
		LEVEL 0 FOR 123.009;
		LEVEL 1 FOR 871.059;
	}
}
TRANSITION_LIST("sa")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.733;
		LEVEL 0 FOR 102.634;
		LEVEL 1 FOR 891.633;
	}
}
TRANSITION_LIST("Per_stop")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.516;
		LEVEL 0 FOR 994.484;
	}
}
TRANSITION_LIST("T")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 5.263;
		LEVEL 0 FOR 703.345;
		LEVEL 1 FOR 19.543;
		LEVEL 0 FOR 271.849;
	}
}


DISPLAY_LINE
{
	CHANNEL = "Clock";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "AD";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3, 4, 5, 6, 7, 8, 9;
}

DISPLAY_LINE
{
	CHANNEL = "AD[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "AD[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "AD[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "AD[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "AD[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "AD[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "AD[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "AD[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "Start";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Stop";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "nIOR";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "nIOW";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "count";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 14;
	TREE_LEVEL = 0;
	CHILDREN = 15, 16, 17, 18, 19;
}

DISPLAY_LINE
{
	CHANNEL = "count[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "count[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "count[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "count[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "count[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Unsigned;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 14;
}

DISPLAY_LINE
{
	CHANNEL = "Result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "En";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Read";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "sa";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "Per_stop";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "T";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 25;
	TREE_LEVEL = 0;
}
TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
