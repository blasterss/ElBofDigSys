// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/28/2025 11:45:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux_scheme
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_scheme_vlg_sample_tst(
	Clock,
	Enable,
	sampler_tx
);
input  Clock;
input  Enable;
output sampler_tx;

reg sample;
time current_time;
always @(Clock or Enable)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux_scheme_vlg_check_tst (
	Cnt,
	Period,
	Result,
	sampler_rx
);
input [4:0] Cnt;
input  Period;
input  Result;
input sampler_rx;

reg [4:0] Cnt_expected;
reg  Period_expected;
reg  Result_expected;

reg [4:0] Cnt_prev;
reg  Period_prev;
reg  Result_prev;

reg [4:0] Cnt_expected_prev;
reg  Period_expected_prev;
reg  Result_expected_prev;

reg [4:0] last_Cnt_exp;
reg  last_Period_exp;
reg  last_Result_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cnt_prev = Cnt;
	Period_prev = Period;
	Result_prev = Result;
end

// update expected /o prevs

always @(trigger)
begin
	Cnt_expected_prev = Cnt_expected;
	Period_expected_prev = Period_expected;
	Result_expected_prev = Result_expected;
end


// expected Cnt[ 4 ]
initial
begin
	Cnt_expected[4] = 1'bX;
end 
// expected Cnt[ 3 ]
initial
begin
	Cnt_expected[3] = 1'bX;
end 
// expected Cnt[ 2 ]
initial
begin
	Cnt_expected[2] = 1'bX;
end 
// expected Cnt[ 1 ]
initial
begin
	Cnt_expected[1] = 1'bX;
end 
// expected Cnt[ 0 ]
initial
begin
	Cnt_expected[0] = 1'bX;
end 

// expected Result
initial
begin
	Result_expected = 1'bX;
end 

// expected Period
initial
begin
	Period_expected = 1'bX;
end 
// generate trigger
always @(Cnt_expected or Cnt or Period_expected or Period or Result_expected or Result)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cnt = %b | expected Period = %b | expected Result = %b | ",Cnt_expected_prev,Period_expected_prev,Result_expected_prev);
	$display("| real Cnt = %b | real Period = %b | real Result = %b | ",Cnt_prev,Period_prev,Result_prev);
`endif
	if (
		( Cnt_expected_prev[0] !== 1'bx ) && ( Cnt_prev[0] !== Cnt_expected_prev[0] )
		&& ((Cnt_expected_prev[0] !== last_Cnt_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cnt_expected_prev);
		$display ("     Real value = %b", Cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cnt_exp[0] = Cnt_expected_prev[0];
	end
	if (
		( Cnt_expected_prev[1] !== 1'bx ) && ( Cnt_prev[1] !== Cnt_expected_prev[1] )
		&& ((Cnt_expected_prev[1] !== last_Cnt_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cnt_expected_prev);
		$display ("     Real value = %b", Cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cnt_exp[1] = Cnt_expected_prev[1];
	end
	if (
		( Cnt_expected_prev[2] !== 1'bx ) && ( Cnt_prev[2] !== Cnt_expected_prev[2] )
		&& ((Cnt_expected_prev[2] !== last_Cnt_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cnt_expected_prev);
		$display ("     Real value = %b", Cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cnt_exp[2] = Cnt_expected_prev[2];
	end
	if (
		( Cnt_expected_prev[3] !== 1'bx ) && ( Cnt_prev[3] !== Cnt_expected_prev[3] )
		&& ((Cnt_expected_prev[3] !== last_Cnt_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cnt_expected_prev);
		$display ("     Real value = %b", Cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cnt_exp[3] = Cnt_expected_prev[3];
	end
	if (
		( Cnt_expected_prev[4] !== 1'bx ) && ( Cnt_prev[4] !== Cnt_expected_prev[4] )
		&& ((Cnt_expected_prev[4] !== last_Cnt_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cnt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cnt_expected_prev);
		$display ("     Real value = %b", Cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cnt_exp[4] = Cnt_expected_prev[4];
	end
	if (
		( Period_expected_prev !== 1'bx ) && ( Period_prev !== Period_expected_prev )
		&& ((Period_expected_prev !== last_Period_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Period :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Period_expected_prev);
		$display ("     Real value = %b", Period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Period_exp = Period_expected_prev;
	end
	if (
		( Result_expected_prev !== 1'bx ) && ( Result_prev !== Result_expected_prev )
		&& ((Result_expected_prev !== last_Result_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Result_exp = Result_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux_scheme_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg Enable;
// wires                                               
wire [4:0] Cnt;
wire Period;
wire Result;

wire sampler;                             

// assign statements (if any)                          
mux_scheme i1 (
// port map - connection between master ports and signals/registers   
	.Clock(Clock),
	.Cnt(Cnt),
	.Enable(Enable),
	.Period(Period),
	.Result(Result)
);

// Enable
initial
begin
	Enable = 1'b1;
	Enable = #940000 1'b0;
end 

// Clock
initial
begin
	repeat(33)
	begin
		Clock = 1'b0;
		Clock = #26400 1'b1;
		# 3600;
	end
	Clock = 1'b0;
end 

mux_scheme_vlg_sample_tst tb_sample (
	.Clock(Clock),
	.Enable(Enable),
	.sampler_tx(sampler)
);

mux_scheme_vlg_check_tst tb_out(
	.Cnt(Cnt),
	.Period(Period),
	.Result(Result),
	.sampler_rx(sampler)
);
endmodule

