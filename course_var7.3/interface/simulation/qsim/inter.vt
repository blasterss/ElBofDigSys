// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2025 23:31:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    inter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module inter_vlg_sample_tst(
	A,
	C,
	DB,
	nIOR,
	nIOW,
	R,
	Start,
	sampler_tx
);
input [7:0] A;
input  C;
input [7:0] DB;
input  nIOR;
input  nIOW;
input  R;
input  Start;
output sampler_tx;

reg sample;
time current_time;
always @(A or C or DB or nIOR or nIOW or R or Start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module inter_vlg_check_tst (
	Addr,
	HBits,
	Input,
	LBits,
	Read,
	Ready,
	Result,
	SEL,
	sampler_rx
);
input [1:0] Addr;
input  HBits;
input [11:0] Input;
input  LBits;
input  Read;
input  Ready;
input  Result;
input  SEL;
input sampler_rx;

reg [1:0] Addr_expected;
reg  HBits_expected;
reg [11:0] Input_expected;
reg  LBits_expected;
reg  Read_expected;
reg  Ready_expected;
reg  Result_expected;
reg  SEL_expected;

reg [1:0] Addr_prev;
reg  HBits_prev;
reg [11:0] Input_prev;
reg  LBits_prev;
reg  Read_prev;
reg  Ready_prev;
reg  Result_prev;
reg  SEL_prev;

reg [1:0] Addr_expected_prev;
reg  HBits_expected_prev;
reg [11:0] Input_expected_prev;
reg  LBits_expected_prev;
reg  Read_expected_prev;
reg  Ready_expected_prev;
reg  Result_expected_prev;
reg  SEL_expected_prev;

reg [1:0] last_Addr_exp;
reg  last_HBits_exp;
reg [11:0] last_Input_exp;
reg  last_LBits_exp;
reg  last_Read_exp;
reg  last_Ready_exp;
reg  last_Result_exp;
reg  last_SEL_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	Addr_prev = Addr;
	HBits_prev = HBits;
	Input_prev = Input;
	LBits_prev = LBits;
	Read_prev = Read;
	Ready_prev = Ready;
	Result_prev = Result;
	SEL_prev = SEL;
end

// update expected /o prevs

always @(trigger)
begin
	Addr_expected_prev = Addr_expected;
	HBits_expected_prev = HBits_expected;
	Input_expected_prev = Input_expected;
	LBits_expected_prev = LBits_expected;
	Read_expected_prev = Read_expected;
	Ready_expected_prev = Ready_expected;
	Result_expected_prev = Result_expected;
	SEL_expected_prev = SEL_expected;
end


// expected \Input [ 11 ]
initial
begin
	Input_expected[11] = 1'bX;
end 
// expected \Input [ 10 ]
initial
begin
	Input_expected[10] = 1'bX;
end 
// expected \Input [ 9 ]
initial
begin
	Input_expected[9] = 1'bX;
end 
// expected \Input [ 8 ]
initial
begin
	Input_expected[8] = 1'bX;
end 
// expected \Input [ 7 ]
initial
begin
	Input_expected[7] = 1'bX;
end 
// expected \Input [ 6 ]
initial
begin
	Input_expected[6] = 1'bX;
end 
// expected \Input [ 5 ]
initial
begin
	Input_expected[5] = 1'bX;
end 
// expected \Input [ 4 ]
initial
begin
	Input_expected[4] = 1'bX;
end 
// expected \Input [ 3 ]
initial
begin
	Input_expected[3] = 1'bX;
end 
// expected \Input [ 2 ]
initial
begin
	Input_expected[2] = 1'bX;
end 
// expected \Input [ 1 ]
initial
begin
	Input_expected[1] = 1'bX;
end 
// expected \Input [ 0 ]
initial
begin
	Input_expected[0] = 1'bX;
end 
// expected Addr[ 1 ]
initial
begin
	Addr_expected[1] = 1'bX;
end 
// expected Addr[ 0 ]
initial
begin
	Addr_expected[0] = 1'bX;
end 

// expected Read
initial
begin
	Read_expected = 1'bX;
end 

// expected Result
initial
begin
	Result_expected = 1'bX;
end 

// expected Ready
initial
begin
	Ready_expected = 1'bX;
end 

// expected SEL
initial
begin
	SEL_expected = 1'bX;
end 

// expected LBits
initial
begin
	LBits_expected = 1'bX;
end 

// expected HBits
initial
begin
	HBits_expected = 1'bX;
end 
// generate trigger
always @(Addr_expected or Addr or HBits_expected or HBits or Input_expected or Input or LBits_expected or LBits or Read_expected or Read or Ready_expected or Ready or Result_expected or Result or SEL_expected or SEL)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Addr = %b | expected HBits = %b | expected Input = %b | expected LBits = %b | expected Read = %b | expected Ready = %b | expected Result = %b | expected SEL = %b | ",Addr_expected_prev,HBits_expected_prev,Input_expected_prev,LBits_expected_prev,Read_expected_prev,Ready_expected_prev,Result_expected_prev,SEL_expected_prev);
	$display("| real Addr = %b | real HBits = %b | real Input = %b | real LBits = %b | real Read = %b | real Ready = %b | real Result = %b | real SEL = %b | ",Addr_prev,HBits_prev,Input_prev,LBits_prev,Read_prev,Ready_prev,Result_prev,SEL_prev);
`endif
	if (
		( Addr_expected_prev[0] !== 1'bx ) && ( Addr_prev[0] !== Addr_expected_prev[0] )
		&& ((Addr_expected_prev[0] !== last_Addr_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Addr_expected_prev);
		$display ("     Real value = %b", Addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Addr_exp[0] = Addr_expected_prev[0];
	end
	if (
		( Addr_expected_prev[1] !== 1'bx ) && ( Addr_prev[1] !== Addr_expected_prev[1] )
		&& ((Addr_expected_prev[1] !== last_Addr_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Addr_expected_prev);
		$display ("     Real value = %b", Addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Addr_exp[1] = Addr_expected_prev[1];
	end
	if (
		( HBits_expected_prev !== 1'bx ) && ( HBits_prev !== HBits_expected_prev )
		&& ((HBits_expected_prev !== last_HBits_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HBits :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HBits_expected_prev);
		$display ("     Real value = %b", HBits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HBits_exp = HBits_expected_prev;
	end
	if (
		( Input_expected_prev[0] !== 1'bx ) && ( Input_prev[0] !== Input_expected_prev[0] )
		&& ((Input_expected_prev[0] !== last_Input_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Input_exp[0] = Input_expected_prev[0];
	end
	if (
		( Input_expected_prev[1] !== 1'bx ) && ( Input_prev[1] !== Input_expected_prev[1] )
		&& ((Input_expected_prev[1] !== last_Input_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Input_exp[1] = Input_expected_prev[1];
	end
	if (
		( Input_expected_prev[2] !== 1'bx ) && ( Input_prev[2] !== Input_expected_prev[2] )
		&& ((Input_expected_prev[2] !== last_Input_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Input_exp[2] = Input_expected_prev[2];
	end
	if (
		( Input_expected_prev[3] !== 1'bx ) && ( Input_prev[3] !== Input_expected_prev[3] )
		&& ((Input_expected_prev[3] !== last_Input_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Input_exp[3] = Input_expected_prev[3];
	end
	if (
		( Input_expected_prev[4] !== 1'bx ) && ( Input_prev[4] !== Input_expected_prev[4] )
		&& ((Input_expected_prev[4] !== last_Input_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Input_exp[4] = Input_expected_prev[4];
	end
	if (
		( Input_expected_prev[5] !== 1'bx ) && ( Input_prev[5] !== Input_expected_prev[5] )
		&& ((Input_expected_prev[5] !== last_Input_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Input_exp[5] = Input_expected_prev[5];
	end
	if (
		( Input_expected_prev[6] !== 1'bx ) && ( Input_prev[6] !== Input_expected_prev[6] )
		&& ((Input_expected_prev[6] !== last_Input_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Input_exp[6] = Input_expected_prev[6];
	end
	if (
		( Input_expected_prev[7] !== 1'bx ) && ( Input_prev[7] !== Input_expected_prev[7] )
		&& ((Input_expected_prev[7] !== last_Input_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Input_exp[7] = Input_expected_prev[7];
	end
	if (
		( Input_expected_prev[8] !== 1'bx ) && ( Input_prev[8] !== Input_expected_prev[8] )
		&& ((Input_expected_prev[8] !== last_Input_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Input_exp[8] = Input_expected_prev[8];
	end
	if (
		( Input_expected_prev[9] !== 1'bx ) && ( Input_prev[9] !== Input_expected_prev[9] )
		&& ((Input_expected_prev[9] !== last_Input_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Input_exp[9] = Input_expected_prev[9];
	end
	if (
		( Input_expected_prev[10] !== 1'bx ) && ( Input_prev[10] !== Input_expected_prev[10] )
		&& ((Input_expected_prev[10] !== last_Input_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Input_exp[10] = Input_expected_prev[10];
	end
	if (
		( Input_expected_prev[11] !== 1'bx ) && ( Input_prev[11] !== Input_expected_prev[11] )
		&& ((Input_expected_prev[11] !== last_Input_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Input[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Input_expected_prev);
		$display ("     Real value = %b", Input_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Input_exp[11] = Input_expected_prev[11];
	end
	if (
		( LBits_expected_prev !== 1'bx ) && ( LBits_prev !== LBits_expected_prev )
		&& ((LBits_expected_prev !== last_LBits_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LBits :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LBits_expected_prev);
		$display ("     Real value = %b", LBits_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LBits_exp = LBits_expected_prev;
	end
	if (
		( Read_expected_prev !== 1'bx ) && ( Read_prev !== Read_expected_prev )
		&& ((Read_expected_prev !== last_Read_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_expected_prev);
		$display ("     Real value = %b", Read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Read_exp = Read_expected_prev;
	end
	if (
		( Ready_expected_prev !== 1'bx ) && ( Ready_prev !== Ready_expected_prev )
		&& ((Ready_expected_prev !== last_Ready_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ready_expected_prev);
		$display ("     Real value = %b", Ready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Ready_exp = Ready_expected_prev;
	end
	if (
		( Result_expected_prev !== 1'bx ) && ( Result_prev !== Result_expected_prev )
		&& ((Result_expected_prev !== last_Result_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Result :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Result_expected_prev);
		$display ("     Real value = %b", Result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Result_exp = Result_expected_prev;
	end
	if (
		( SEL_expected_prev !== 1'bx ) && ( SEL_prev !== SEL_expected_prev )
		&& ((SEL_expected_prev !== last_SEL_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SEL_exp = SEL_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module inter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg C;
reg [7:0] DB;
reg nIOR;
reg nIOW;
reg R;
reg Start;
// wires                                               
wire [1:0] Addr;
wire HBits;
wire [11:0] Input;
wire LBits;
wire Read;
wire Ready;
wire Result;
wire SEL;

wire sampler;                             

// assign statements (if any)                          
inter i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.Addr(Addr),
	.C(C),
	.DB(DB),
	.HBits(HBits),
	.\Input (Input),
	.LBits(LBits),
	.nIOR(nIOR),
	.nIOW(nIOW),
	.R(R),
	.Read(Read),
	.Ready(Ready),
	.Result(Result),
	.SEL(SEL),
	.Start(Start)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
	A[7] = #30000 1'b1;
	A[7] = #750000 1'b0;
	A[7] = #40000 1'b1;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	A[2] = #30000 1'b1;
	A[2] = #750000 1'b0;
	A[2] = #40000 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
	A[0] = #30000 1'b1;
	A[0] = #750000 1'b0;
	A[0] = #40000 1'b1;
end 
// DB[ 7 ]
initial
begin
	DB[7] = 1'b0;
	DB[7] = #70000 1'b1;
	DB[7] = #40000 1'b0;
	DB[7] = #290000 1'b1;
	DB[7] = #40000 1'b0;
end 
// DB[ 6 ]
initial
begin
	DB[6] = 1'b0;
end 
// DB[ 5 ]
initial
begin
	DB[5] = 1'b0;
	DB[5] = #30000 1'b1;
	DB[5] = #40000 1'b0;
	DB[5] = #290000 1'b1;
	DB[5] = #80000 1'b0;
end 
// DB[ 4 ]
initial
begin
	DB[4] = 1'b0;
	DB[4] = #30000 1'b1;
	DB[4] = #40000 1'b0;
	DB[4] = #290000 1'b1;
	DB[4] = #40000 1'b0;
end 
// DB[ 3 ]
initial
begin
	DB[3] = 1'b0;
	DB[3] = #70000 1'b1;
	DB[3] = #40000 1'b0;
	DB[3] = #290000 1'b1;
	DB[3] = #40000 1'b0;
end 
// DB[ 2 ]
initial
begin
	DB[2] = 1'b0;
	DB[2] = #30000 1'b1;
	DB[2] = #40000 1'b0;
	DB[2] = #290000 1'b1;
	DB[2] = #40000 1'b0;
end 
// DB[ 1 ]
initial
begin
	DB[1] = 1'b0;
	DB[1] = #70000 1'b1;
	DB[1] = #40000 1'b0;
	DB[1] = #290000 1'b1;
	DB[1] = #40000 1'b0;
end 
// DB[ 0 ]
initial
begin
	DB[0] = 1'b0;
	DB[0] = #30000 1'b1;
	DB[0] = #80000 1'b0;
	DB[0] = #290000 1'b1;
	DB[0] = #40000 1'b0;
end 

// R
initial
begin
	R = 1'b1;
	R = #10000 1'b0;
end 

// Start
initial
begin
	Start = 1'b0;
	Start = #140000 1'b1;
	Start = #20000 1'b0;
	Start = #290000 1'b1;
	Start = #20000 1'b0;
end 

// C
always
begin
	C = 1'b0;
	C = #5000 1'b1;
	#5000;
end 

// nIOR
initial
begin
	nIOR = 1'b1;
	nIOR = #130000 1'b0;
	nIOR = #10000 1'b1;
	nIOR = #300000 1'b0;
	nIOR = #10000 1'b1;
end 

// nIOW
initial
begin
	nIOW = 1'b1;
	nIOW = #30000 1'b0;
	nIOW = #10000 1'b1;
	nIOW = #30000 1'b0;
	nIOW = #10000 1'b1;
	nIOW = #280000 1'b0;
	nIOW = #10000 1'b1;
	nIOW = #30000 1'b0;
	nIOW = #10000 1'b1;
end 

inter_vlg_sample_tst tb_sample (
	.A(A),
	.C(C),
	.DB(DB),
	.nIOR(nIOR),
	.nIOW(nIOW),
	.R(R),
	.Start(Start),
	.sampler_tx(sampler)
);

inter_vlg_check_tst tb_out(
	.Addr(Addr),
	.HBits(HBits),
	.Input(Input),
	.LBits(LBits),
	.Read(Read),
	.Ready(Ready),
	.Result(Result),
	.SEL(SEL),
	.sampler_rx(sampler)
);
endmodule

